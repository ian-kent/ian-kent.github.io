<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Mojolicious on Software engineering and other stuff</title>
    <link>http://ian-kent.github.io/tags/mojolicious/</link>
    <description>Recent content in Mojolicious on Software engineering and other stuff</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-gb</language>
    <copyright>Copyright (c) 2014 - 2015, Ian Kent; all rights reserved.</copyright>
    <lastBuildDate>Sun, 20 Apr 2014 12:58:57 +0000</lastBuildDate>
    <atom:link href="http://ian-kent.github.io/tags/mojolicious/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Action composition in Mojolicious</title>
      <link>http://ian-kent.github.io/blog/action-composition-in-mojolicious/</link>
      <pubDate>Sun, 20 Apr 2014 12:58:57 +0000</pubDate>
      
      <guid>http://ian-kent.github.io/blog/action-composition-in-mojolicious/</guid>
      <description>

&lt;p&gt;Something about the routing in Mojolicious has been making things difficult, and Play Framework had the answer.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/ian-kent/mojolicious-action-composition&#34;&gt;Full source code for these examples can be found on GitHub&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;routing-differences-in-play-framework-and-mojolicious:a3daa83d4d79bd93ea67944afafd2b47&#34;&gt;Routing differences in Play Framework and Mojolicious&lt;/h3&gt;

&lt;p&gt;It wasn&amp;rsquo;t obvious at first, but the routing model in Mojolicious quickly becomes an unfathomable mess - and very difficult to debug.&lt;/p&gt;

&lt;h4 id=&#34;mojolicious:a3daa83d4d79bd93ea67944afafd2b47&#34;&gt;Mojolicious&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Routes are complicated, can be chained together, and can have bridges and conditions which control the way routes behave:

&lt;ul&gt;
&lt;li&gt;Conditions are synchronous, and can switch between sub-routes on a per-request basis&lt;/li&gt;
&lt;li&gt;Bridges can be asynchronous, but always ultimately end at the same destination (e.g., you couldn&amp;rsquo;t have two identical routes running through different bridges, since Mojolicious couldn&amp;rsquo;t determine which to use or if a route even exists, which is why conditions are synchronous).&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Controller actions are plain subs, called directly at run-time by the Mojolicious router

&lt;ul&gt;
&lt;li&gt;Actions manipulate the stash and call Mojolicious methods directly (e.g. render)&lt;/li&gt;
&lt;li&gt;The return value from an action is of limited use&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;play-framework:a3daa83d4d79bd93ea67944afafd2b47&#34;&gt;Play Framework:&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Routes are simple - they&amp;rsquo;re written statically and have no concept of bridges or conditions.

&lt;ul&gt;
&lt;li&gt;One route can point to one action, limited flexibility at the routing layer&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Actions are composed by nesting action functions, with outer functions calling inner functions

&lt;ul&gt;
&lt;li&gt;The action returns either a result, or a future result&lt;/li&gt;
&lt;li&gt;Actions can choose to call other actions, or contain multiple nested actions inside one action&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;action-composition:a3daa83d4d79bd93ea67944afafd2b47&#34;&gt;Action composition&lt;/h3&gt;

&lt;p&gt;At first, the Play Framework routing model seemed very inflexible. Routes are static, and there&amp;rsquo;s no concept of bridges, conditions or any other way to intercept a request.&lt;/p&gt;

&lt;p&gt;With Mojolicious, bridges and chained routes make its easy to abstract the &amp;lsquo;how I get there&amp;rsquo; logic away from the &amp;lsquo;once I&amp;rsquo;ve got here&amp;rsquo; logic - and the Play Framework way of life didn&amp;rsquo;t seem to offer the same flexibility.&lt;/p&gt;

&lt;p&gt;Play Framework uses action composition, which means nesting actions inside other actions, and it felt a bit too restrictive.&lt;/p&gt;

&lt;p&gt;But action composition quickly proved to be the more powerful of the two. And definitely the easiest to understand, especially when tracing requests through a complicated web application.&lt;/p&gt;

&lt;h3 id=&#34;why-the-mojolicious-model-starts-well-but-ends-badly:a3daa83d4d79bd93ea67944afafd2b47&#34;&gt;Why the Mojolicious model starts well, but ends badly&lt;/h3&gt;

&lt;p&gt;The Mojolicious model is extremely powerful for a simple application - we can define route stubs or bridges, attach more routes to those, intercept requests in bridges and return 404 or 500 errors. Which is great - but then we end in a messy refactoring nightmare:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The code used in routing (e.g. authenticated bridges) needs to be shared between applications&lt;/li&gt;
&lt;li&gt;We move the code into a shared library, and get it to create named bridges&lt;/li&gt;
&lt;li&gt;We update our applications to use the named bridge from the shared library&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;All good so far.&lt;/p&gt;

&lt;p&gt;Now we want to use a hook to intercept some part of the request - adding headers for example:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;We write a plugin which registers a hook&lt;/li&gt;
&lt;li&gt;The hook adds custom headers to a response&lt;/li&gt;
&lt;li&gt;We include the plugin in our application, and all responses get new headers&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Still good. But once we&amp;rsquo;ve done this a few times, we end up with all routing and request manipulation being done by shared libraries. We have limited code visibility, and all we get to show for our efforts are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A few &lt;code&gt;-&amp;gt;plugin&lt;/code&gt; lines, adding &amp;lsquo;unknown&amp;rsquo; functionality to our routing&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;$app&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;plugin(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;My::Magic::Routing::Plugin&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;$app&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;plugin(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;Another::Magic::Routing::Plugin&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;An dangerous action sub, with no idea how the request gets there&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;sub &lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;this_should_be_authenticated_and_authorised&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;$self&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;delete_all_data;&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;$self&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;make_everyone_admin;&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;$self&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;enter_maintenance_mode;&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;$self&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;render(text&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;hope I really was authenticated...&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;And now we&amp;rsquo;re potentially screwed.&lt;/p&gt;

&lt;p&gt;Mojolicious routing has become well hidden technical debt (or a serious defect/PR disaster) waiting to bite.&lt;/p&gt;

&lt;h3 id=&#34;why-the-play-framework-model-is-better:a3daa83d4d79bd93ea67944afafd2b47&#34;&gt;Why the Play Framework model is better&lt;/h3&gt;

&lt;p&gt;Although routing becomes far more static in Play Framework, we can still refactor our routing code into shared libraries.&lt;/p&gt;

&lt;p&gt;But there&amp;rsquo;s one important difference.&lt;/p&gt;

&lt;p&gt;With Play Framework action composition, we maintain full code visibility at the controller:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;index&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;Authenticated&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;request&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;=&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color: #a6e22e&#34;&gt;Authorised&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;request&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;request&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;user&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #a6e22e&#34;&gt;Ok&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;request&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;user&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;get&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt;
  &lt;span style=&#34;color: #f92672&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;otherwise&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #a6e22e&#34;&gt;Unauthorized&lt;/span&gt;
  &lt;span style=&#34;color: #f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;Instead of tracing through multiple plugins to find out what happens to a request, it&amp;rsquo;s all there in front of us. We know the request is Authenticated, and is then Authorised. If we have a bug, its easy to follow a request to see what happens.&lt;/p&gt;

&lt;p&gt;We can also choose how much code visibility we get - for example, Authenticated takes care of what happens if user authentication fails, but Authorised leaves it to the developer to decide how to handle an authorisation failure.&lt;/p&gt;

&lt;h3 id=&#34;so-what-can-we-do-about-it:a3daa83d4d79bd93ea67944afafd2b47&#34;&gt;So what can we do about it&lt;/h3&gt;

&lt;p&gt;This is Perl - there&amp;rsquo;s always a way!&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s define the syntax first:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #75715e&#34;&gt;# a plain action&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;Action&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;welcome&amp;#39;&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;sub &lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;shift&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;render(text&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;};&lt;/span&gt;

&lt;span style=&#34;color: #75715e&#34;&gt;# an asynchronous action (without a render_later call)&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;Action&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;login&amp;#39;&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;Async&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color: #66d9ef&#34;&gt;my&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;$self&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;shift;&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;Mojo::IOLoop&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;timer(&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;0.25&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;sub &lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;$self&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;render(text&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;});&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;};&lt;/span&gt;

&lt;span style=&#34;color: #75715e&#34;&gt;# an authenticated action&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;Action&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;private1&amp;#39;&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;Authenticated&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;shift&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;render(text&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;};&lt;/span&gt;

&lt;span style=&#34;color: #75715e&#34;&gt;# nested actions, with parameters&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;Action&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;private2&amp;#39;&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;Async&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;Authenticated&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;WithPermission&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;blog.post&amp;#39;&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;sub &lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;shift&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;render(text&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;},&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;sub &lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;shift&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;render(text&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;not authorised&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;}};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;h3 id=&#34;implementing-it-in-mojolicious:a3daa83d4d79bd93ea67944afafd2b47&#34;&gt;Implementing it in Mojolicious&lt;/h3&gt;

&lt;p&gt;To start with, we need a way to define an action. This is essentially the same as the default sub{}, but lets us capture its contents.&lt;/p&gt;

&lt;h4 id=&#34;the-basic-action-action:a3daa83d4d79bd93ea67944afafd2b47&#34;&gt;The basic Action action&lt;/h4&gt;

&lt;p&gt;We need to be able to pass in a sub, and return a sub (though, for the top-level Action, we&amp;rsquo;ll need to monkey patch it so the Mojolicious router can find it).&lt;/p&gt;

&lt;p&gt;Since we need to be able to chain these actions together, we also need to recursively call the inner action. We&amp;rsquo;ll also need to do that for any other actions we define, so lets make it generic:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;sub &lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;go&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color: #66d9ef&#34;&gt;my&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;($controller,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;$inner)&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;@_;&lt;/span&gt;
  &lt;span style=&#34;color: #66d9ef&#34;&gt;my&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;$i&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;$inner;&lt;/span&gt;
  &lt;span style=&#34;color: #66d9ef&#34;&gt;while&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;($i)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;my&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;$res&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;$i&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;($controller)&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;ref($i)&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;eq&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;CODE&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;$i&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;ref($res)&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;eq&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;CODE&amp;#39;&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;?&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;$res&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;undef;&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
  &lt;span style=&#34;color: #66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;undef;&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;sub &lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;Action&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;($$)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color: #66d9ef&#34;&gt;my&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;($action,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;$inner)&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;@_;&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;monkey_patch&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;caller,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;$action&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;sub &lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;go(shift,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;$inner)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;This is enough to let us define a new action like this:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;Action&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;myaction&amp;#39;&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;sub &lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;shift&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;render(text&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;h4 id=&#34;a-nested-action-async:a3daa83d4d79bd93ea67944afafd2b47&#34;&gt;A nested action - Async&lt;/h4&gt;

&lt;p&gt;Adding another action type is just as easy.&lt;/p&gt;

&lt;p&gt;Since Async is our first &amp;lsquo;nested&amp;rsquo; action, we&amp;rsquo;ll implement that:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;sub &lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;Async&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&amp;amp;) {&lt;/span&gt;
  &lt;span style=&#34;color: #66d9ef&#34;&gt;my&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;$inner&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;shift;&lt;/span&gt;
  &lt;span style=&#34;color: #66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;sub &lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;my&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;$controller&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;shift;&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;$controller&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;render_later;&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;go($controller,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;$inner);&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;Now we can define an Async action, without needing to call &lt;code&gt;render_later&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;Action&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;login&amp;#39;&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;Async&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color: #66d9ef&#34;&gt;my&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;$self&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;shift;&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;Mojo::IOLoop&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;timer(&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;0.25&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;sub &lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;$self&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;session(auth&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;$self&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;render(text&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;});&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;h4 id=&#34;an-action-with-parameters:a3daa83d4d79bd93ea67944afafd2b47&#34;&gt;An action with parameters&lt;/h4&gt;

&lt;p&gt;We&amp;rsquo;ll skip over the Authenticated action for now - its almost identical to Async, with the exception of needing to perform a session lookup to decide whether to continue the action chain.&lt;/p&gt;

&lt;p&gt;Instead, we&amp;rsquo;ll implement WithPermission - an action with run-time parameters.&lt;/p&gt;

&lt;p&gt;We need to be able to pass in some custom parameters, and a sub, and have it return a sub which, like the others, invokes the inner sub when its called:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;sub &lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;WithPermission&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;($&amp;amp;;&amp;amp;) {&lt;/span&gt;
  &lt;span style=&#34;color: #66d9ef&#34;&gt;my&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;($permission,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;$inner,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;$error)&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;@_;&lt;/span&gt;
  &lt;span style=&#34;color: #66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;sub &lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;my&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;$controller&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;shift;&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;($permission&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;eq&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;blog.delete&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
      &lt;span style=&#34;color: #f8f8f2&#34;&gt;go($controller,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;$inner);&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
      &lt;span style=&#34;color: #f8f8f2&#34;&gt;$error&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;?&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;go($controller,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;$error)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;$controller&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;render_exception(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;Unauthorised&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;undef;&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;Which lets us define an action like this:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;Action&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;private1&amp;#39;&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;Authenticated&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;WithPermission&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;blog.post&amp;#39;&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;sub &lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;shift&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;render(text&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;},&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;sub &lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;shift&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;render(text&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;need permission blog.post&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;}};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;If the user is authenticated and has the permission &amp;lsquo;blog.post&amp;rsquo;, the first inner action gets executed, otherwise the second is called instead. However, since our WithPermission action only accepts &amp;lsquo;blog.delete&amp;rsquo;, this will always fail.&lt;/p&gt;

&lt;p&gt;The WithPermission action also implements a default failure action, so we could skip the second inner action completely.&lt;/p&gt;

&lt;h3 id=&#34;summary:a3daa83d4d79bd93ea67944afafd2b47&#34;&gt;Summary&lt;/h3&gt;

&lt;p&gt;The simple implementation above gives us the flexibility to move our bridge and condition code away from the routing and into the controller layer, improving code visibility for developers.&lt;/p&gt;

&lt;p&gt;We can get many of the benefits that Play Framework offers, but there&amp;rsquo;s still one big difference.&lt;/p&gt;

&lt;p&gt;In Play Framework, we could invoke an action and inspect its result, and still choose to not return that content to the user. This gives us the flexibility to invoke multiple actions, and decide later which to use, for example:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;index&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;Authenticated&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;request&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;=&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color: #66d9ef&#34;&gt;val&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;res1&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;Foo&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;request&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;);&lt;/span&gt;
  &lt;span style=&#34;color: #66d9ef&#34;&gt;val&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;res2&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;Bar&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;request&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;);&lt;/span&gt;
  &lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;((&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;res1&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;body&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;json&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;\&lt;/span&gt; &amp;#39;some_key&lt;span style=&#34;color: #960050; background-color: #1e0010&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;).&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;isDefined&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color: #a6e22e&#34;&gt;Authorised&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;res1&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;request&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;user&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color: #66d9ef&#34;&gt;else&lt;/span&gt;
    &lt;span style=&#34;color: #a6e22e&#34;&gt;Unauthorized&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;In Mojolicious, the client might end up with a mixture of both responses, or just whichever gets called first. Because Mojolicious doesn&amp;rsquo;t use the return value, as soon as an action calls &lt;code&gt;-&amp;gt;render&lt;/code&gt; it will immediately return a response to the client.&lt;/p&gt;

&lt;p&gt;It should be possible - by creating a new stash and fake response objects, and possibly patching &lt;code&gt;-&amp;gt;render&lt;/code&gt; - to trick Mojolicious into supporting a future/promise based interface.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Quick start with Perl and Mojolicious</title>
      <link>http://ian-kent.github.io/blog/quick-start-with-perl-and-mojolicious/</link>
      <pubDate>Fri, 14 Feb 2014 14:43:20 +0000</pubDate>
      
      <guid>http://ian-kent.github.io/blog/quick-start-with-perl-and-mojolicious/</guid>
      <description>&lt;p&gt;To get started with &lt;a href=&#34;http://www.mojolicio.us&#34;&gt;Mojolicious&lt;/a&gt;, just as quick and dirty as with &lt;a href=&#34;//iankent.co.uk/2014/02/13/quick-start-with-scala-and-play-framework/&#34;&gt;Scala and Play Framework&lt;/a&gt;, you need only these:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://vagrantup.com&#34;&gt;Vagrant&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.virtualbox.org/&#34;&gt;VirtualBox&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://git-scm.com/download/win&#34;&gt;Git for Windows&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Once they&amp;rsquo;re all installed, its this easy:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Open Git Bash&lt;/li&gt;
&lt;li&gt;Clone my &lt;a href=&#34;https://github.com/ian-kent/vagrant-perl-mojolicious-mongodb&#34;&gt;Mojolicious/Perl vagrant repository&lt;/a&gt;: &lt;code&gt;git clone https://github.com/ian-kent/vagrant-perl-mojolicious-mongodb.git mojoserver&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Change directory: &lt;code&gt;cd mojoserver&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Start the virtual machine: &lt;code&gt;vagrant up&lt;/code&gt; (might take a while, installing Perl is slow!)&lt;/li&gt;
&lt;li&gt;Once it&amp;rsquo;s complete, connect using SSH: &lt;code&gt;vagrant ssh&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Create a new Mojolicious app: &lt;code&gt;mojo generate app MyApp&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Change directory: &lt;code&gt;cd my_app&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Start your application: &lt;code&gt;./script/my_app daemon&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;View your new Mojolicious site in a browser: &lt;code&gt;http://localhost:3000&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It installs the latest version of &lt;a href=&#34;http://mojolicio.us&#34;&gt;Mojolicious&lt;/a&gt; and &lt;a href=&#34;http://mojolicio.us/perldoc/Mango&#34;&gt;Mango&lt;/a&gt; along with Perl 5.18.2 and &lt;a href=&#34;http://cpanmin.us&#34;&gt;cpanminus&lt;/a&gt; using Perlbrew.&lt;/p&gt;

&lt;p&gt;To help you get started, the Vagrantfile also installs &lt;a href=&#34;http://www.mongodb.org/&#34;&gt;MongoDB&lt;/a&gt; and sets up port forwarding for port 3000 and 8080 (Mojolicious with Morbo and Hypnotoad) and port 27017 (MongoDB)&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>